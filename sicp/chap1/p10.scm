#lang sicp

(define (A x y)
  (cond ((= y 0) 0)
        ((= x 0) (* 2 y))
        ((= y 1) 2)
        (else (A (- x 1)
                 (A x (- y 1))))))

;(A 1 10) -> (A 0 (A 1 9)) = 2 * (A 1 9) = ... = 2 ^ 9 * (A 1 1) = 2 ^ 10
(A 1 10)

;(A 2 4) -> (A 1 A(2 3)) = 2 ^ (A 2 3) = 2 ^ (A 1 A(2 2)) = 2 ^ 2 ^ (A 2 2) = 2 ^ 2 ^ 2 ^ (A 2 1) = 2 ^ 2 ^ 2 ^ 2
(A 2 4)

;(A 3 3) -> (A 2 (A 3 2)) -> (A 2 (A 1 (A 3 1))) -> (A 2 (A 1 2)) -> (A 2 2^2) -> (A 2 4)
(A 3 3)

; f(n) = 2 + f(n-1) = 2 * n = 2 + 2 + ... + 2
(define (f n) (A 0 n))

; g(n)= 2 * g(n-1) =  2 ^ n = 2 * 2 * ... * 2
; g(n) = f(g(n-1))
(define (g n) (A 1 n))

; h(n) = 2 ^ h(n-1) = 2 ^ 2 ^ ... ^ 2
; h(n) = g(h(n-1))
(define A (h n) ( A 2 n))